problem = """
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all
figurate (polygonal) numbers and are generated by the following formulae:

Triangle         P3,n=n(n+1)/2         1, 3, 6, 10, 15, ...
Square           P4,n=n2               1, 4, 9, 16, 25, ...
Pentagonal       P5,n=n(3n−1)/2        1, 5, 12, 22, 35, ...
Hexagonal        P6,n=n(2n−1)          1, 6, 15, 28, 45, ...
Heptagonal       P7,n=n(5n−3)/2        1, 7, 18, 34, 55, ...
Octagonal        P8,n=n(3n−2)          1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting
properties:

- The set is cyclic, in that the last two digits of each number is the first two digits
of the next number (including the last number with the first).

- Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
pentagonal (P5,44=2882), is represented by a different number in the set.

- This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each
polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal,
is represented by a different number in the set.
"""


def solution():
    P3 = [int((n*(n+1))/2) for n in range(45, 141)]
    P4 = [int(n**2) for n in range(32, 100)]
    P5 = [int((n*(3*n-1))/2) for n in range(26, 82)]
    P6 = [int(n*(2*n-1)) for n in range(23, 71)]
    P7 = [int((n*(5*n-3))/2) for n in range(21, 64)]
    P8 = [int(n*(3*n-2)) for n in range(19, 59)]
    print(f'p3: {P3}', f'P4: {P4}', f'P5: {P5}', f'P6: {P6}', f'P7: {P7}', f'P8: {P8}', sep='\n\n')

    result = []
    for p3 in P3:
        p3_last_two_digits = p3 % 100
        # print(p3, p3_first_two_digits, p3_last_two_digits)
        cycle = [p3]
        for P in [P4, P5, P6, P7, P8]:
            for p in P:
                p_first_two_digits = p // 100
                if p3_last_two_digits == p_first_two_digits:
                    p3_last_two_digits = p % 100
                    cycle.append(p)
                    break
        if len(cycle) == 6:
            print(cycle)


if __name__ == "__main__":
    solution()
